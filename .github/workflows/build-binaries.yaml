---
#################################################################################
# Pipeline to build binaries
#################################################################################
name: Build binaries


on:
  workflow_call:
    inputs:
      branch:
        required: true
        type: string
      runner:
        required: true
        type: string
      architecture:
        required: true
        type: string
      version_type:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      runner:
        type: choice
        options:
          - self-hosted-hoprnet-big
          - macos-13
          - macos-14
        required: true
        description: 'GH Runner to use: macos-13=x86_64-darwin and macos-14=aarch64-darwin'
      architecture:
        type: choice
        options:
          - x86_64-linux
          - aarch64-linux
          - aarch64-darwin
          - x86_64-darwin
          - armv7l-linux
        required: true
        description: 'Architecture to build for'

concurrency:
  group: ${{ github.ref }}-build-binary-${{ inputs.architecture }}
  cancel-in-progress: true

jobs:
  binary:
    if: >-
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, format('binary:{0}', inputs.architecture)))
    runs-on: ${{ github.event.inputs.runner || inputs.runner }}
    timeout-minutes: 60
    steps:
      - name: Set environment variables
        id: vars
        run: |
          declare branch architecture publish_type
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "The workflow is triggered by other pipeline"
            branch=${{ inputs.branch }}
            architecture=${{ inputs.architecture }}
          else
            echo "The workflow is triggered manually"
            branch=${{ github.ref_name }}
            architecture=${{ github.event.inputs.architecture }}
          fi
          if [[ "${{ github.event_name}}" == "workflow_dispatch" ]]; then
            publish_type="workflow"
          else
            publish_type="artifact-registry"
          fi
          echo "Invocation parameters:"
          echo "branch=${branch}" | tee -a $GITHUB_OUTPUT
          echo "architecture=${architecture}" | tee -a $GITHUB_OUTPUT
          echo "publish_type=${publish_type}" | tee -a $GITHUB_OUTPUT

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.vars.outputs.branch }}

      - name: Install Nix
        uses: cachix/install-nix-action@v29
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          nix_path: nixpkgs=channel:nixos-24.05

      - name: Use Nix Cache
        uses: cachix/cachix-action@v15
        with:
          name: gnosis-vpn-client
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
        env:
          USER: runner

      - name: Get version
        if: inputs.version_type != 'undefined' && inputs.version_type != ''
        id: version
        run: |
          base_version=$(grep -E '^version\s*=' Cargo.toml | awk -F\" '{print $2}')
          if [[ ${{ inputs.version_type }} == "commit" ]]; then
            echo "binary_version=${base_version}-commit.$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          elif [[ ${{ inputs.version_type }} == "pr" ]]; then
            echo "binary_version=${base_version}-pr.${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          elif [[ ${{ inputs.version_type }} == "tag" ]]; then
            echo "binary_version=${base_version}" >> $GITHUB_OUTPUT
          else
            echo "Invalid version type"
            exit 1
          fi

      - name: Build binary ${{ steps.vars.outputs.architecture}}
        run: |
          nix build .#gnosisvpn-${{ steps.vars.outputs.architecture}} -L
          mkdir -p binaries
          cp ./result/bin/gnosis-vpn binaries/gnosis-vpn-${{ steps.vars.outputs.architecture}}
          cp ./result/bin/gnosis-vpn-ctl binaries/gnosis-vpn-ctl-${{ steps.vars.outputs.architecture}}
          if [[ "${{ inputs.version_type }}" == "commit" ]]; then
            mv binaries/gnosis-vpn-${{ steps.vars.outputs.architecture}} binaries/gnosis-vpn-${{ steps.vars.outputs.architecture}}-${{ steps.version.outputs.binary_version }}
            mv binaries/gnosis-vpn-ctl-${{ steps.vars.outputs.architecture}} binaries/gnosis-vpn-ctl-${{ steps.vars.outputs.architecture}}-${{ steps.version.outputs.binary_version }}
          fi

      - name: Setup GCP
        if: steps.vars.outputs.publish_type == 'artifact-registry'
        uses: hoprnet/hopr-workflows/actions/setup-gcp@master
        with:
          google-credentials: ${{ secrets.GOOGLE_HOPRASSOCIATION_CREDENTIALS_REGISTRY }}
          install-sdk: 'true'

      - name: Publish Artifact registry
        if: steps.vars.outputs.publish_type == 'artifact-registry'
        run: |
          gcloud artifacts generic upload --location=europe-west3 --repository="rust-binaries" --version=${{ steps.version.outputs.binary_version }} --package=gnosis-vpn --source=binaries/gnosis-vpn-${{ steps.vars.outputs.architecture}}
          gcloud artifacts generic upload --location=europe-west3 --repository="rust-binaries" --version=${{ steps.version.outputs.binary_version }} --package=gnosis-vpn-ctl --source=binaries/gnosis-vpn-ctl-${{ steps.vars.outputs.architecture}}


      - name: Upload ${{ steps.vars.outputs.binary }} binaries
        if: steps.vars.outputs.publish_type == 'workflow'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.vars.outputs.binary }}-${{ steps.vars.outputs.architecture }}
          path: ${{ github.workspace }}/binaries/*
