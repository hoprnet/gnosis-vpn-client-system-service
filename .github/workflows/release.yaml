name: Close release

on:
    workflow_dispatch:
        inputs:
            release_type:
                description: 'Next version type'
                required: true
                type: choice
                default: 'patch'
                options:
                    - patch
                    - minor
                    - major

concurrency:
    group: release
    cancel-in-progress: false

jobs:

    # build-binaries:
    #   strategy:
    #     matrix:
    #       binary:
    #         - architecture: x86_64-linux
    #           runner: self-hosted-hoprnet-big
    #         - architecture: aarch64-linux
    #           runner: self-hosted-hoprnet-big
    #         - architecture: armv7l-linux
    #           runner: self-hosted-hoprnet-big
    #         # - architecture: aarch64-darwin
    #         #   runner: macos-14
    #         # - architecture: x86_64-darwin
    #         #   runner: macos-13
    #   name: Binary ${{ matrix.binary.architecture }}
    #   uses: ./.github/workflows/build-binaries.yaml
    #   with:
    #     branch: main
    #     runner: ${{ matrix.binary.runner }}
    #     architecture: ${{ matrix.binary.architecture }}
    #     version_type: 'release'
    #   secrets: inherit

    release:
        name: Close release
        # needs: 
        #   - build-binaries
        runs-on: self-hosted-hoprnet-small

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  token: ${{ secrets.GH_RUNNER_TOKEN }}

            - name: Setup GCP
              id: gcp
              uses: hoprnet/hopr-workflows/actions/setup-gcp@master
              with:
                  google-credentials: ${{ secrets.GOOGLE_HOPRASSOCIATION_CREDENTIALS_REGISTRY }}
                  install-sdk: 'true'

            - name: Setup environment variables
              id: environment
              run: |
                  release_version=$(grep -E '^version\s*=' Cargo.toml | awk -F\" '{print $2}')
                  echo "release_version=${release_version}" >> $GITHUB_OUTPUT

            # - name: Create Release
            #   uses: softprops/action-gh-release@v2
            #   with:
            #       name: 'gnosis-vpn-client - v${{ steps.environment.outputs.release_version }}'
            #       tag_name: v${{ steps.environment.outputs.release_version }}

            - name: Publish binaries
              run: |
                  set -x
                  architectures=("aarch64-darwin" "x86_64-darwin" "aarch64-linux" "x86_64-linux" "armv7l-linux" )
                  architectures=("aarch64-linux" "x86_64-linux" "armv7l-linux")
                  echo "${{ secrets.GH_RUNNER_TOKEN }}" | gh auth login --with-token
                  mkdir -p binaries
                  for architecture in "${architectures[@]}"; do
                      gcloud artifacts files download --project=hoprassociation --location=europe-west3 --repository=rust-binaries gnosis-vpn:${{ steps.environment.outputs.release_version }}:gnosis-vpn-${architecture} --destination=./binaries --local-filename=gnosis-vpn-${architecture}
                      gcloud artifacts files download --project=hoprassociation --location=europe-west3 --repository=rust-binaries gnosis-vpn:${{ steps.environment.outputs.release_version }}:gnosis-vpn-ctl-${architecture} --destination=./binaries --local-filename=gnosis-vpn-ctl-${architecture}
                      ls -alR binaries
                      gh release view v${{ steps.environment.outputs.release_version }}
                      echo gh release upload v${{ steps.environment.outputs.release_version }} "$PWD//binaries/gnosis-vpn-${architecture}" --clobber
                      gh release upload v${{ steps.environment.outputs.release_version }} "$PWD//binaries/gnosis-vpn-${architecture}" --clobber
                      gh release upload v${{ steps.environment.outputs.release_version }} "$PWD//binaries/gnosis-vpn-ctl-${architecture}" --clobber
                  done
              env:
                GH_TOKEN: ${{ secrets.GH_RUNNER_TOKEN }}

            # - name: Tag version in git
            #   run: |
            #     git tag v${{ steps.environment.outputs.release_version }} -m "Release v${{ steps.environment.outputs.release_version }}"
            #     git push origin v${{ steps.environment.outputs.release_version }}

            - name: Bump Version
              id: bump
              run: |
                CURRENT_VERSION=$(grep -E '^version\s*=' Cargo.toml | awk -F\" '{print $2}')

                # Split the version into components
                IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

                # Bump the appropriate part
                case "${{ inputs.release_type }}" in
                    major)
                        ((MAJOR++))
                        MINOR=0
                        PATCH=0
                        ;;
                    minor)
                        ((MINOR++))
                        PATCH=0
                        ;;
                    patch)
                        ((PATCH++))
                        ;;
                esac

                BUMP_VERSION="${MAJOR}.${MINOR}.${PATCH}"
                echo "Updating version from $CURRENT_VERSION to $BUMP_VERSION"

                # Update the version in Cargo.toml
                # capture group 1: version = "
                # capture group 2: the version number
                # capture group 3: "
                sed -i.bak -E "s/(^version\s*=\s*\")([0-9]+\.[0-9]+\.[0-9]+)(\")/\1${BUMP_VERSION}\3/" Cargo.toml
                rm Cargo.toml.bak
                echo "bump_version=${BUMP_VERSION}" >> $GITHUB_OUTPUT

            # - uses: EndBug/add-and-commit@v9
            #   with:
            #       add: 'Cargo.toml'
            #       new_branch: main
            #       message: 'Bump to version ${{ steps.bump.outputs.bump_version }}'
            #       pathspec_error_handling: exitImmediately

            # - name: Notify new release
            #   uses: zulip/github-actions-zulip/send-message@v1
            #   with:
            #       api-key: ${{ secrets.ZULIP_API_KEY }}
            #       email: ${{ secrets.ZULIP_EMAIL }}
            #       organization-url: 'https://hopr.zulipchat.com'
            #       type: 'stream'
            #       to: 'Releases'
            #       topic: 'main'
            #       content: |
            #           I'm thrilled to inform the new **gnosis-vpn-client** version **${{ steps.environment.outputs.release_version }}** has been released.